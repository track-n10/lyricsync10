<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LyricSync10 - Free Lyrics Synchronization Tool</title>
    
    <!-- Favicon personalizado -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><rect width=%22100%22 height=%22100%22 rx=%2220%22 fill=%22%234361ee%22/><path d=%22M30 30 L70 30 L70 70 L30 70 Z%22 fill=%22none%22 stroke=%22%234cc9f0%22 stroke-width=%228%22/><path d=%22M40 40 L40 60 L50 50 L60 40 L60 60%22 fill=%22none%22 stroke=%22white%22 stroke-width=%224%22 stroke-linecap=%22round%22 stroke-linejoin=%22round%22/></svg>">
    
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --success: #4cc9f0;
            --dark: #1d3557;
            --light: #f8f9fa;
            --danger: #e63946;
            --warning: #ffb703;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1d3557, #3f37c9);
            color: var(--light);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 20px 0;
            margin-bottom: 30px;
        }
        
        header h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            background: linear-gradient(90deg, var(--success), var(--primary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .logo-icon {
            width: 60px;
            height: 60px;
            background: var(--success);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            color: var(--dark);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        header p {
            font-size: 1.1rem;
            opacity: 0.9;
            max-width: 700px;
            margin: 0 auto;
        }
        
        .app-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }
        
        @media (max-width: 900px) {
            .app-container {
                grid-template-columns: 1fr;
            }
        }
        
        .panel {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .panel:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 36px rgba(0, 0, 0, 0.3);
        }
        
        .panel-title {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .panel-title h2 {
            font-size: 1.5rem;
        }
        
        .upload-area {
            border: 2px dashed rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            padding: 40px 20px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            margin-bottom: 20px;
        }
        
        .upload-area:hover {
            border-color: var(--success);
            background: rgba(76, 201, 240, 0.1);
        }
        
        .upload-area i {
            font-size: 3rem;
            margin-bottom: 15px;
            color: var(--success);
        }
        
        .upload-area p {
            margin-bottom: 15px;
            font-size: 1.1rem;
        }
        
        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn:hover {
            background: var(--secondary);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .btn-success {
            background: var(--success);
        }
        
        .btn-success:hover {
            background: #3ab0d5;
        }
        
        .btn-warning {
            background: var(--warning);
            color: var(--dark);
        }
        
        .btn-warning:hover {
            background: #e6a500;
        }
        
        .btn-danger {
            background: var(--danger);
        }
        
        .btn-danger:hover {
            background: #c1121f;
        }
        
        .audio-player {
            width: 100%;
            margin: 20px 0;
        }
        
        .player-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .time-display {
            font-family: monospace;
            background: rgba(0, 0, 0, 0.3);
            padding: 5px 10px;
            border-radius: 5px;
        }
        
        progress {
            width: 100%;
            height: 10px;
            border-radius: 5px;
            margin: 10px 0;
            -webkit-appearance: none;
        }
        
        progress::-webkit-progress-bar {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
        }
        
        progress::-webkit-progress-value {
            background: var(--success);
            border-radius: 5px;
        }
        
        .lyrics-container {
            max-height: 500px;
            overflow-y: auto;
            padding-right: 10px;
            border-radius: 8px;
            background: rgba(0, 0, 0, 0.1);
        }
        
        .lyrics-container::-webkit-scrollbar {
            width: 8px;
        }
        
        .lyrics-container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }
        
        .lyrics-container::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 10px;
        }
        
        .lyrics-editor {
            width: 100%;
            height: 300px;
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 15px;
            color: white;
            font-size: 1rem;
            resize: vertical;
            margin-bottom: 20px;
        }
        
        .verse {
            padding: 10px 15px;
            margin: 8px 0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
        }
        
        .verse:hover {
            background: rgba(76, 201, 240, 0.2);
        }
        
        .verse.synced {
            background: rgba(67, 97, 238, 0.3);
            border-left: 4px solid var(--success);
        }
        
        .verse.synced::after {
            content: 'âœ“';
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--success);
            font-weight: bold;
        }
        
        .verse.current {
            background: rgba(255, 183, 3, 0.3);
            border-left: 4px solid var(--warning);
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { background: rgba(255, 183, 3, 0.3); }
            50% { background: rgba(255, 183, 3, 0.5); }
            100% { background: rgba(255, 183, 3, 0.3); }
        }
        
        .controls {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-top: 20px;
        }
        
        .file-info {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            background: rgba(0, 0, 0, 0.2);
            padding: 15px;
            border-radius: 10px;
            flex-wrap: wrap;
        }
        
        .file-info div {
            display: flex;
            flex-direction: column;
        }
        
        .file-info span:first-child {
            font-size: 0.9rem;
            opacity: 0.7;
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.1);
            border-left: 4px solid var(--success);
            padding: 20px;
            border-radius: 0 8px 8px 0;
            margin: 25px 0;
        }
        
        .instructions h3 {
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .instructions ol {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 10px;
            line-height: 1.6;
        }
        
        footer {
            text-align: center;
            padding: 30px 0 20px;
            opacity: 0.9;
            font-size: 1rem;
            border-top: 1px solid rgba(255,255,255,0.1);
            margin-top: 20px;
        }
        
        .highlight {
            color: var(--success);
            font-weight: bold;
        }
        
        .srt-preview {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 15px;
            font-family: monospace;
            font-size: 0.9rem;
            max-height: 200px;
            overflow-y: auto;
            margin-top: 20px;
            white-space: pre-wrap;
            display: none;
        }
        
        .creator-badge {
            display: inline-block;
            background: rgba(255,255,255,0.1);
            padding: 8px 16px;
            border-radius: 20px;
            margin-top: 10px;
            font-weight: bold;
            color: var(--success);
            border: 1px solid var(--success);
        }
        
        .feature-badge {
            display: inline-block;
            background: rgba(76, 201, 240, 0.2);
            color: var(--success);
            padding: 5px 12px;
            border-radius: 5px;
            font-size: 0.85rem;
            margin: 5px 0;
        }
        
        .status-bar {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
            padding: 10px;
            background: rgba(0,0,0,0.2);
            border-radius: 8px;
        }
        
        .share-section {
            text-align: center;
            margin: 30px 0;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }
        
        .share-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .share-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .share-btn:hover {
            background: var(--secondary);
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <div class="logo-icon">
                    <i class="fas fa-music"></i>
                </div>
                <h1>LyricSync10</h1>
            </div>
            <p>Synchronize your song lyrics with audio and generate SRT files for YouTube videos, editing apps, and lyric visualizers</p>
        </header>
        
        <div class="instructions">
            <h3><i class="fas fa-info-circle"></i> How to Use:</h3>
            <ol>
                <li>Upload the audio file of your song</li>
                <li>Paste or edit the song lyrics in the editor</li>
                <li>Click <span class="highlight">Start Synchronization</span> and play the audio</li>
                <li>Click each lyric line at the exact moment it starts in the song</li>
                <li>When finished, click <span class="highlight">Generate SRT</span> to download your synced file</li>
            </ol>
            <div class="feature-badge">100% Free</div>
            <div class="feature-badge">No Registration Required</div>
            <div class="feature-badge">Works Offline</div>
        </div>
        
        <div class="app-container">
            <div class="panel">
                <div class="panel-title">
                    <i class="fas fa-music"></i>
                    <h2>Audio</h2>
                </div>
                
                <div class="upload-area" id="audio-upload">
                    <i class="fas fa-file-audio"></i>
                    <p>Drag and drop your audio file here</p>
                    <p>or</p>
                    <button class="btn" id="browse-audio">
                        <i class="fas fa-folder-open"></i> Select File
                    </button>
                    <input type="file" id="audio-file" accept="audio/*" hidden>
                </div>
                
                <div id="audio-info" class="file-info" style="display: none;">
                    <div>
                        <span>File:</span>
                        <span id="audio-filename"></span>
                    </div>
                    <div>
                        <span>Duration:</span>
                        <span id="audio-duration"></span>
                    </div>
                </div>
                
                <div class="player-controls">
                    <button class="btn" id="play-btn">
                        <i class="fas fa-play"></i> Play
                    </button>
                    <button class="btn" id="pause-btn">
                        <i class="fas fa-pause"></i> Pause
                    </button>
                    <button class="btn" id="stop-btn">
                        <i class="fas fa-stop"></i> Stop
                    </button>
                    <div class="time-display">
                        <span id="current-time">00:00</span> / <span id="total-time">00:00</span>
                    </div>
                </div>
                
                <progress id="progress-bar" value="0" max="100"></progress>
                
                <div class="controls">
                    <button class="btn btn-success" id="start-sync">
                        <i class="fas fa-sync-alt"></i> Start Synchronization
                    </button>
                    <button class="btn btn-danger" id="reset-btn">
                        <i class="fas fa-redo"></i> Reset All
                    </button>
                </div>
                
                <div class="status-bar" id="sync-status" style="display: none;">
                    <span><i class="fas fa-sync-alt"></i> Synchronization in progress</span>
                    <span id="sync-progress">0/0 lines synced</span>
                </div>
            </div>
            
            <div class="panel">
                <div class="panel-title">
                    <i class="fas fa-font"></i>
                    <h2>Lyrics</h2>
                </div>
                
                <textarea class="lyrics-editor" id="lyrics-editor" placeholder="Paste your song lyrics here...&#10;Put each lyric line on a separate line.&#10;&#10;Example:&#10;This is the first line of the song&#10;This is the second line of the song&#10;And this is the third line..."></textarea>
                
                <div class="lyrics-container" id="lyrics-container" style="display: none;">
                    <!-- Lyric lines will appear here -->
                </div>
                
                <div class="controls">
                    <button class="btn btn-success" id="generate-srt" disabled>
                        <i class="fas fa-download"></i> Generate & Download SRT
                    </button>
                    <button class="btn btn-warning" id="preview-srt">
                        <i class="fas fa-eye"></i> Preview SRT
                    </button>
                </div>
                
                <div id="srt-preview" class="srt-preview">
                    <!-- SRT preview will appear here -->
                </div>
            </div>
        </div>
        
        <div class="share-section">
            <h3><i class="fas fa-share-alt"></i> Share LyricSync10</h3>
            <p>Help other independent artists by sharing this tool</p>
            <div class="share-buttons">
                <button class="share-btn" id="copy-link">
                    <i class="fas fa-link"></i> Copy Link
                </button>
                <button class="share-btn" id="download-file">
                    <i class="fas fa-download"></i> Download File
                </button>
                <button class="share-btn" id="share-github">
                    <i class="fab fa-github"></i> Share on GitHub
                </button>
            </div>
        </div>
        
        <footer>
            <p>LyricSync10 - Free tool for musicians and content creators</p>
            <p>All processing happens in your browser - your files never leave your computer</p>
            <div class="creator-badge">
                Created by TRACK_N10 aka Leonardo Sales Santos for independent artists
            </div>
        </footer>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // DOM Elements
            const audioUpload = document.getElementById('audio-upload');
            const browseAudioBtn = document.getElementById('browse-audio');
            const audioFileInput = document.getElementById('audio-file');
            const audioPlayer = new Audio();
            const playBtn = document.getElementById('play-btn');
            const pauseBtn = document.getElementById('pause-btn');
            const stopBtn = document.getElementById('stop-btn');
            const progressBar = document.getElementById('progress-bar');
            const currentTimeEl = document.getElementById('current-time');
            const totalTimeEl = document.getElementById('total-time');
            const audioInfo = document.getElementById('audio-info');
            const audioFilename = document.getElementById('audio-filename');
            const audioDuration = document.getElementById('audio-duration');
            const lyricsEditor = document.getElementById('lyrics-editor');
            const lyricsContainer = document.getElementById('lyrics-container');
            const startSyncBtn = document.getElementById('start-sync');
            const resetBtn = document.getElementById('reset-btn');
            const generateSrtBtn = document.getElementById('generate-srt');
            const previewSrtBtn = document.getElementById('preview-srt');
            const srtPreview = document.getElementById('srt-preview');
            const syncStatus = document.getElementById('sync-status');
            const syncProgress = document.getElementById('sync-progress');
            const copyLinkBtn = document.getElementById('copy-link');
            const downloadFileBtn = document.getElementById('download-file');
            const shareGithubBtn = document.getElementById('share-github');
            
            // State variables
            let isSyncing = false;
            let lyrics = [];
            let syncedLyrics = [];
            
            // Event setup
            browseAudioBtn.addEventListener('click', () => audioFileInput.click());
            audioUpload.addEventListener('dragover', (e) => {
                e.preventDefault();
                audioUpload.style.borderColor = '#4cc9f0';
                audioUpload.style.backgroundColor = 'rgba(76, 201, 240, 0.1)';
            });
            
            audioUpload.addEventListener('dragleave', () => {
                audioUpload.style.borderColor = 'rgba(255, 255, 255, 0.3)';
                audioUpload.style.backgroundColor = '';
            });
            
            audioUpload.addEventListener('drop', (e) => {
                e.preventDefault();
                audioUpload.style.borderColor = 'rgba(255, 255, 255, 0.3)';
                audioUpload.style.backgroundColor = '';
                
                if (e.dataTransfer.files.length) {
                    handleAudioFile(e.dataTransfer.files[0]);
                }
            });
            
            audioFileInput.addEventListener('change', (e) => {
                if (e.target.files.length) {
                    handleAudioFile(e.target.files[0]);
                }
            });
            
            // Handle audio file
            function handleAudioFile(file) {
                if (!file.type.startsWith('audio/')) {
                    alert('Please select a valid audio file.');
                    return;
                }
                
                const url = URL.createObjectURL(file);
                audioPlayer.src = url;
                
                // Display file info
                audioFilename.textContent = file.name;
                audioInfo.style.display = 'flex';
                
                // When audio metadata is loaded
                audioPlayer.addEventListener('loadedmetadata', () => {
                    const duration = audioPlayer.duration;
                    audioDuration.textContent = formatTime(duration);
                    totalTimeEl.textContent = formatTime(duration);
                });
            }
            
            // Audio player events
            playBtn.addEventListener('click', () => {
                if (audioPlayer.src) {
                    audioPlayer.play();
                } else {
                    alert('Please load an audio file first.');
                }
            });
            
            pauseBtn.addEventListener('click', () => {
                audioPlayer.pause();
            });
            
            stopBtn.addEventListener('click', () => {
                audioPlayer.pause();
                audioPlayer.currentTime = 0;
                progressBar.value = 0;
                currentTimeEl.textContent = '00:00';
                
                // Remove current verse highlight
                const currentVerse = document.querySelector('.verse.current');
                if (currentVerse) {
                    currentVerse.classList.remove('current');
                }
            });
            
            // Update progress bar and time
            audioPlayer.addEventListener('timeupdate', () => {
                if (!isNaN(audioPlayer.duration)) {
                    const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                    progressBar.value = progress;
                    currentTimeEl.textContent = formatTime(audioPlayer.currentTime);
                    
                    // Highlight current verse during sync
                    if (isSyncing) {
                        highlightCurrentVerse();
                    }
                }
            });
            
            // Start synchronization
            startSyncBtn.addEventListener('click', () => {
                if (!audioPlayer.src) {
                    alert('Please load an audio file first.');
                    return;
                }
                
                const rawLyrics = lyricsEditor.value.trim();
                if (!rawLyrics) {
                    alert('Please enter song lyrics in the editor.');
                    return;
                }
                
                lyrics = rawLyrics.split('\n').filter(line => line.trim() !== '');
                syncedLyrics = [];
                
                // Display lyrics for synchronization
                displayLyricsForSync();
                lyricsContainer.style.display = 'block';
                isSyncing = true;
                syncStatus.style.display = 'flex';
                updateSyncProgress();
                
                alert('Synchronization started! Click each lyric line at the exact moment it starts in the song.');
            });
            
            // Display lyrics for sync
            function displayLyricsForSync() {
                lyricsContainer.innerHTML = '';
                
                lyrics.forEach((verse, index) => {
                    const verseEl = document.createElement('div');
                    verseEl.className = 'verse';
                    verseEl.textContent = verse;
                    verseEl.dataset.index = index;
                    
                    verseEl.addEventListener('click', () => {
                        if (isSyncing) {
                            syncVerse(index);
                        }
                    });
                    
                    lyricsContainer.appendChild(verseEl);
                });
            }
            
            // Sync a verse
            function syncVerse(index) {
                if (syncedLyrics[index]) return; // Already synced
                
                syncedLyrics[index] = {
                    text: lyrics[index],
                    startTime: audioPlayer.currentTime
                };
                
                const verseEl = document.querySelector(`.verse[data-index="${index}"]`);
                verseEl.classList.add('synced');
                
                // Check if all verses are synced
                checkIfAllSynced();
                updateSyncProgress();
            }
            
            // Update sync progress
            function updateSyncProgress() {
                const syncedCount = syncedLyrics.filter(Boolean).length;
                syncProgress.textContent = `${syncedCount}/${lyrics.length} lines synced`;
            }
            
            // Check if all verses are synced
            function checkIfAllSynced() {
                const allSynced = lyrics.every((_, index) => syncedLyrics[index]);
                
                if (allSynced) {
                    isSyncing = false;
                    generateSrtBtn.disabled = false;
                    syncStatus.style.display = 'none';
                    alert('All lyrics have been synchronized! You can now generate the SRT file.');
                }
            }
            
            // Highlight current verse during playback
            function highlightCurrentVerse() {
                const verses = document.querySelectorAll('.verse');
                
                // Remove highlight from all verses
                verses.forEach(verse => verse.classList.remove('current'));
                
                // Find current verse based on time
                for (let i = syncedLyrics.length - 1; i >= 0; i--) {
                    if (syncedLyrics[i] && audioPlayer.currentTime >= syncedLyrics[i].startTime) {
                        const currentVerse = document.querySelector(`.verse[data-index="${i}"]`);
                        if (currentVerse) {
                            currentVerse.classList.add('current');
                            
                            // Scroll to current verse
                            currentVerse.scrollIntoView({
                                behavior: 'smooth',
                                block: 'center'
                            });
                        }
                        break;
                    }
                }
            }
            
            // Generate SRT content
            function generateSRTContent() {
                if (syncedLyrics.length === 0) return '';
                
                let srtContent = '';
                let subtitleIndex = 1;
                
                for (let i = 0; i < syncedLyrics.length; i++) {
                    if (!syncedLyrics[i]) continue;
                    
                    const startTime = syncedLyrics[i].startTime;
                    const endTime = i < syncedLyrics.length - 1 && syncedLyrics[i+1] ? 
                        syncedLyrics[i+1].startTime : startTime + 5; // 5 seconds if last line
                    
                    srtContent += `${subtitleIndex}\n`;
                    srtContent += `${formatTimeSrt(startTime)} --> ${formatTimeSrt(endTime)}\n`;
                    srtContent += `${syncedLyrics[i].text}\n\n`;
                    
                    subtitleIndex++;
                }
                
                return srtContent;
            }
            
            // Preview SRT
            previewSrtBtn.addEventListener('click', () => {
                if (syncedLyrics.length === 0) {
                    alert('Please sync at least one lyric line first.');
                    return;
                }
                
                srtPreview.textContent = generateSRTContent();
                srtPreview.style.display = 'block';
            });
            
            // Generate and download SRT
            generateSrtBtn.addEventListener('click', () => {
                const srtContent = generateSRTContent();
                
                if (!srtContent) {
                    alert('No synchronized lyrics to generate SRT.');
                    return;
                }
                
                const blob = new Blob([srtContent], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = 'synchronized_lyrics.srt';
                document.body.appendChild(a);
                a.click();
                
                // Cleanup
                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 100);
            });
            
            // Reset everything
            resetBtn.addEventListener('click', () => {
                audioPlayer.pause();
                audioPlayer.currentTime = 0;
                audioPlayer.src = '';
                audioFileInput.value = '';
                audioInfo.style.display = 'none';
                progressBar.value = 0;
                currentTimeEl.textContent = '00:00';
                totalTimeEl.textContent = '00:00';
                lyricsEditor.value = '';
                lyricsContainer.innerHTML = '';
                lyricsContainer.style.display = 'none';
                srtPreview.style.display = 'none';
                srtPreview.textContent = '';
                isSyncing = false;
                lyrics = [];
                syncedLyrics = [];
                generateSrtBtn.disabled = true;
                syncStatus.style.display = 'none';
                
                // Remove classes from verses
                const verses = document.querySelectorAll('.verse');
                verses.forEach(verse => {
                    verse.classList.remove('synced', 'current');
                });
            });
            
            // Helper functions for time formatting
            function formatTime(seconds) {
                const mins = Math.floor(seconds / 60);
                const secs = Math.floor(seconds % 60);
                return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
            
            function formatTimeSrt(seconds) {
                const hours = Math.floor(seconds / 3600);
                const mins = Math.floor((seconds % 3600) / 60);
                const secs = Math.floor(seconds % 60);
                const ms = Math.floor((seconds - Math.floor(seconds)) * 1000);
                
                return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')},${ms.toString().padStart(3, '0')}`;
            }
            
            // Share functionality
            copyLinkBtn.addEventListener('click', () => {
                const tempInput = document.createElement('textarea');
                tempInput.value = window.location.href;
                document.body.appendChild(tempInput);
                tempInput.select();
                document.execCommand('copy');
                document.body.removeChild(tempInput);
                
                alert('Link copied to clipboard! Share this with others.');
            });
            
            downloadFileBtn.addEventListener('click', () => {
                const blob = new Blob([document.documentElement.outerHTML], { type: 'text/html' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = 'lyricsync10.html';
                document.body.appendChild(a);
                a.click();
                
                // Cleanup
                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 100);
            });
            
            shareGithubBtn.addEventListener('click', () => {
                window.open('https://github.com/new', '_blank');
            });
        });
    </script>
    
    <!-- Font Awesome for icons -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
</body>
</html>
